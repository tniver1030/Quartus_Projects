--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="FLEX10K" IGNORE_CASCADE_BUFFERS="OFF" LPM_SIZE=9 LPM_WIDTH=2 LPM_WIDTHS=4 data result sel
--VERSION_BEGIN 9.0SP2 cbx_lpm_mux 2009:03:31:01:01:28:SJ cbx_mgl 2009:02:26:16:06:21:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cascade (in)
RETURNS ( out);

--synthesis_resources = lut 18 
SUBDESIGN mux_sbc
( 
	data[17..0]	:	input;
	result[1..0]	:	output;
	sel[3..0]	:	input;
) 
VARIABLE 
	csc1 : cascade;
	csc2 : cascade;
	csc3 : cascade;
	csc4 : cascade;
	csc5 : cascade;
	csc6 : cascade;
	muxlut_data0w[8..0]	: WIRE;
	muxlut_data1w[8..0]	: WIRE;
	muxlut_result0w	: WIRE;
	muxlut_result1w	: WIRE;
	muxlut_select0w[3..0]	: WIRE;
	muxlut_select1w[3..0]	: WIRE;
	result_node[1..0]	: WIRE;
	sel_ffs_wire[3..0]	: WIRE;
	sel_node[3..0]	: WIRE;
	w118w[3..0]	: WIRE;
	w120w[1..0]	: WIRE;
	w143w[3..0]	: WIRE;
	w145w[1..0]	: WIRE;
	w166w[1..0]	: WIRE;
	w33w[3..0]	: WIRE;
	w35w[1..0]	: WIRE;
	w58w[3..0]	: WIRE;
	w60w[1..0]	: WIRE;
	w81w[1..0]	: WIRE;
	w_mux_outputs116w[2..0]	: WIRE;
	w_mux_outputs31w[2..0]	: WIRE;

BEGIN 
	csc1.in = ((w35w[1..1] # (w35w[0..0] & w33w[1..1])) # ((! w35w[0..0]) & w33w[0..0]));
	csc2.in = ((w60w[1..1] # (w60w[0..0] & w58w[1..1])) # ((! w60w[0..0]) & w58w[0..0]));
	csc3.in = ((w81w[1..1] # (w81w[0..0] & w_mux_outputs31w[1..1])) # ((! w81w[0..0]) & w_mux_outputs31w[0..0]));
	csc4.in = ((w120w[1..1] # (w120w[0..0] & w118w[1..1])) # ((! w120w[0..0]) & w118w[0..0]));
	csc5.in = ((w145w[1..1] # (w145w[0..0] & w143w[1..1])) # ((! w145w[0..0]) & w143w[0..0]));
	csc6.in = ((w166w[1..1] # (w166w[0..0] & w_mux_outputs116w[1..1])) # ((! w166w[0..0]) & w_mux_outputs116w[0..0]));
	muxlut_data0w[] = ( data[16..16], data[14..14], data[12..12], data[10..10], data[8..8], data[6..6], data[4..4], data[2..2], data[0..0]);
	muxlut_data1w[] = ( data[17..17], data[15..15], data[13..13], data[11..11], data[9..9], data[7..7], data[5..5], data[3..3], data[1..1]);
	muxlut_result0w = (((! w81w[1..1]) # ((! w81w[0..0]) & w_mux_outputs31w[2..2])) & csc3.out);
	muxlut_result1w = (((! w166w[1..1]) # ((! w166w[0..0]) & w_mux_outputs116w[2..2])) & csc6.out);
	muxlut_select0w[] = sel_node[];
	muxlut_select1w[] = sel_node[];
	result[] = result_node[];
	result_node[] = ( muxlut_result1w, muxlut_result0w);
	sel_ffs_wire[] = ( sel[3..0]);
	sel_node[] = ( sel_ffs_wire[3..2], sel[1..0]);
	w118w[3..0] = muxlut_data1w[3..0];
	w120w[1..0] = muxlut_select1w[1..0];
	w143w[3..0] = muxlut_data1w[7..4];
	w145w[1..0] = muxlut_select1w[1..0];
	w166w[1..0] = muxlut_select1w[3..2];
	w33w[3..0] = muxlut_data0w[3..0];
	w35w[1..0] = muxlut_select0w[1..0];
	w58w[3..0] = muxlut_data0w[7..4];
	w60w[1..0] = muxlut_select0w[1..0];
	w81w[1..0] = muxlut_select0w[3..2];
	w_mux_outputs116w[] = ( muxlut_data1w[8..8], ((((! w145w[1..1]) # (w145w[0..0] & w143w[3..3])) # ((! w145w[0..0]) & w143w[2..2])) & csc5.out), ((((! w120w[1..1]) # (w120w[0..0] & w118w[3..3])) # ((! w120w[0..0]) & w118w[2..2])) & csc4.out));
	w_mux_outputs31w[] = ( muxlut_data0w[8..8], ((((! w60w[1..1]) # (w60w[0..0] & w58w[3..3])) # ((! w60w[0..0]) & w58w[2..2])) & csc2.out), ((((! w35w[1..1]) # (w35w[0..0] & w33w[3..3])) # ((! w35w[0..0]) & w33w[2..2])) & csc1.out));
END;
--VALID FILE
